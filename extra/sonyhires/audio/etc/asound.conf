##
#		Advanced Linux Sound Architecture 
#		 Copyright © 2020 Xnext™ WalkMan 
#
#	>> Written to deliver the best music quality, 
#	>>   on different devices. It avoids string naming
#	>>   and using integrer declaration instead.
#
#	written by: 
#						Pete, XDA Developer
##

# Default Control Device
ctl.defaults.card 0
ctl.defaults.device 0

# Default PCM
pcm.defaults.card 0
pcm.defaults.device 0

# Rate Converter & NonBlock Behaviour
defaults.pcm.nonblock 1 
defaults.pcm.rate_converter "speexrate_best"
defaults.pcm.buffer_size 4096
defaults.pcm.avail_min 1024



#
#	Stereo Mic
#

ctl.stereo-mic {
	type hw
	card 0
	device 9
	subdevice 0
}

pcm.stereo-mic {
	type hooks
		slave.pcm {
			type hw
			card 0
			device 9
			subdevice 0
		}
		hooks.0 {
			type ctl_elems
				hook_args [ 
					{  
						name 'MultiMedia5 Mixer TX_CDC_DMA_TX_3'
						preserve false 
						lock false
						value [ 0 0 ] 
					} 
					{ name 'TX_CDC_DMA_TX_3 Channels' value 2 }
					{ name 'TX_AIF1_CAP Mixer DEC0' value 1 }
					{ name 'TX_AIF1_CAP Mixer DEC1' value 1 }
					{ name 'TX DMIC MUX0' value DMIC3 }
					{ name 'TX DMIC MUX1' value DMIC0 }
					{ name 'TX_DEC1 Volume' value 84 }
					{ name 'TX_DEC1 Volume' value 84 }
					{  
						name 'MultiMedia5 Mixer TX_CDC_DMA_TX_3'
						preserve true
						lock true
						value [ 1 0 ] 
					} 
			]
	}
}


#
#   Speaker
#

ctl.speaker {
	type hw
	card 0
	device 9
	subdevice 0
}

pcm.speaker {
	type hooks
		slave.pcm {
			type hw
			card 0
			device 9
			subdevice 0
		}
		hooks.0 { 
			type ctl_elems 
				hook_args [
					{  
						name 'SEN_MI2S_RX Audio Mixer MultiMedia5'
						preserve false
						lock false
						value [ 0 0 ] 
					} 
					{ name 'L Ramp Knee Time' value 2200 }
				    { name 'L Ramp End Time' value 1000 }
				    { name 'L Initial Ramp Volume Attenuation' value 12 }
				    { name 'L Knee Ramp Volume Attenuation' value 6 }
				    { name 'L Manual Ramp Control' value 1 }
				    { name 'R Ramp End Time' value 0 }
				    { name 'R Initial Ramp Volume Attenuation' value 0 }
				    { name 'R Knee Ramp Volume Attenuation' value 0 }
				    { name 'R Manual Ramp Control' value 0 }
				    { name 'L PCM Source' value DSP }
				    { name 'R PCM Source' value DSP }
				    { name 'SEN_MI2S_RX Format' value S24_LE }
				    { name 'SEN_MI2S_TX Format' value S24_LE }
					{  
						name 'SEN_MI2S_RX Audio Mixer MultiMedia5'
						preserve true
						lock true
						value [ 1 0 ] 
					} 
				]
		}
}

#
#   Speaker Mic
#

ctl.speaker-mic {
	type hw
	card 0
	device 9
	subdevice 0
}

pcm.speaker-mic {
	type hooks
		slave.pcm {
			type hw
			card 0
			device 9
			subdevice 0
		}
		hooks.0 {
			type ctl_elems
				hook_args [ 
					{  
						name 'MultiMedia5 Mixer TX_CDC_DMA_TX_3'
						preserve false 
						lock false
						value [ 0 0 ] 
					} 
					{ name 'TX_CDC_DMA_TX_3 Channels' value One }
				    { name 'TX_AIF1_CAP Mixer DEC2' value 1 }
				    { name 'TX DMIC MUX2' value DMIC0 }
				    { name 'IIR0 INP0 MUX' value DEC2 }
					{  
						name 'MultiMedia5 Mixer TX_CDC_DMA_TX_3'
						preserve true
						lock true
						value [ 1 0 ] 
					} 
			]
	}
}

#
#	Handset Out
#

ctl.handset-out {
	type hw
	card 0
	device 9
	subdevice 0
}

pcm.handset-out {
	type hooks
		slave.pcm {
			type hw
			card 0
			device 9
			subdevice 0
		}
		hooks.0 { 
			type ctl_elems 
			hook_args [
			{  
				name 'SEN_MI2S_RX Audio Mixer MultiMedia5'
				preserve false
				lock false
				value [ 0 0 ] 
			} 
			{ name 'L PCM Source' value ASP }
		    { name 'R PCM Source' value ASP }
		    { name 'L AMP PCM Gain' value 7 }
		    { name 'R AMP PCM Gain' value 0 }
		    { name 'R Digital PCM Volume' value 0 }
		    { name 'SEN_MI2S_RX Channels' value One }
		    { name 'SEN_MI2S_TX Channels' value One }
		    { name 'SEN_MI2S_RX Format' value S24_LE }
		    { name 'SEN_MI2S_TX Format' value S24_LE }
			{  
				name 'SEN_MI2S_RX Audio Mixer MultiMedia5'
				preserve true
				lock true
				value [ 1 0 ] 
			} 
		] 
	}
}

#
#   Handset Mic 
#

ctl.handset-mic {
	type hw
	card 0
	device 9
	subdevice 0
	} 

pcm.handset-mic {
type hooks
	slave.pcm {
		type hw
		card 0
		device 9
		subdevice 0
	}
	hooks.0 {
		type ctl_elems
		hook_args [
			{  
				name 'MultiMedia5 Mixer TX_CDC_DMA_TX_3'
				preserve false
				lock false
				value [ 0 0 ] 
			}
			{ name 'TX_CDC_DMA_TX_3 Channels' value One }
		    { name 'TX_AIF1_CAP Mixer DEC2' value 1 }
		    { name 'TX DMIC MUX2' value DMIC0 }
		    { name 'IIR0 INP0 MUX' value DEC2 }
			{  
				name 'MultiMedia5 Mixer TX_CDC_DMA_TX_3'
				preserve true
				lock true
				value [ 1 0 ] 
			}
		]
	}
}

#
#   Handset
#

ctl.handset {
	type hw
	card 0
}

pcm.handset {
	type asym
    
    playback.pcm {
		type plug
			slave {
				pcm "handset-out"
			} 
	}
	capture.pcm {
        type plug
			slave {
				pcm "handset-mic"
			} 
	} 
	hint {
		show on
		description "Xnext™ Handset PCM Definition"
	}
}


#
#   Headphone
#

ctl.headphone {
	type hw
	card 0
	device 0
	subdevice 0
}

pcm.headphone {
	type hooks
	
	slave.pcm {
		type hw
		card 0
		device 0
		subdevice 0
	}
	hooks.0 { 
		type ctl_elems 
			hook_args [ 
				{ 
					name 'RX_CDC_DMA_RX_0 Audio Mixer MultiMedia1'
					preserve false
					lock false
					value [ 0 0 ] 
				} 
				{ name 'RX_MACRO RX0 MUX' value AIF1_PB }
			    { name 'RX_MACRO RX1 MUX' value AIF1_PB }
			    { name 'RX_CDC_DMA_RX_0 Channels' value Two }
			    { name 'RX INT0_1 MIX1 INP0' value RX0 }
			    { name 'RX INT1_1 MIX1 INP0' value RX1 }
			    { name 'RX INT0 DEM MUX' value CLSH_DSM_OUT }
			    { name 'RX INT1 DEM MUX' value CLSH_DSM_OUT }
			    { name 'RX_COMP1 Switch' value 0 }
			    { name 'RX_COMP2 Switch' value 0 }
			    { name 'HPH_L Switch' value 1 }
			    { name 'HPH_R Switch' value 1 }
			    { name 'HPHL_COMP Switch' value 0 }
			    { name 'HPHR_COMP Switch' value 0 }
			    { name 'HPHL_RDAC Switch' value 1 }
			    { name 'HPHR_RDAC Switch' value 1 }
			    { name 'RX_RX0 Digital Volume' value 84 }
			    { name 'RX_RX1 Digital Volume' value 84 }
			    { name 'RX_CDC_DMA_RX_0 SampleRate' value KHZ_96 }
			    { name 'RX_CDC_DMA_RX_0 Format' value S32_LE }
				{ 
					name 'RX_CDC_DMA_RX_0 Audio Mixer MultiMedia1'
					preserve true
					lock true
					value [ 1 0 ] 
				} 
			]
	}
}

#
#   Headphones
#


ctl.headphones {
	type hw
	card 0
	device 0
	subdevice 0
}


pcm.headphones {
	type plug
		slave {
			pcm "headphone"
			format S32_LE
			channels 2
			rate 96000
		}
		hint {
			show on
			description "Xnext™ Headphone PCM Definition"
	}
}

#
#   Headset Mic
#

ctl.headset-mic {
	type hw
	card 0
	device 0
	subdevice 0
}

pcm.headset-mic {
	type hooks
	
	slave.pcm {
		type hw
		card 0
		device 0
		subdevice 0
	}
	hooks.0 { 
		type ctl_elems 
			hook_args [
				{  
					name 'MultiMedia1 Mixer TX_CDC_DMA_TX_4'
					preserve false
					lock false
					value [ 0 0 ] 
				}
				{ name 'TX_DEC0 Volume' value 82 }
				{ name 'TX DEC0 MUX' value SWR_MIC }
				{ name 'TX SMIC MUX0' value ADC1 }
				{ name 'TX_CDC_DMA_TX_4 Channels' value One }
				{ name 'DEC0_BCS Switch' value 1 }
				{ name 'TX_AIF2_CAP Mixer DEC0' value 1 }
				{ name 'ADC2_MIXER Switch' value 1 }
				{ name 'ADC2 MUX' value INP2 }
				{ name 'IIR0 INP0 MUX' value DEC0 }
				{  
					name 'MultiMedia1 Mixer TX_CDC_DMA_TX_4'
					preserve true
					lock true
					value [ 1 0 ] 
				}
			]
	}
}

#
#   Headset
#

ctl.headset {
	type hw
	card 0
}

pcm.headset {
	type asym
    
    playback.pcm {
		type plug
			slave.pcm "headphones"
	}
	capture.pcm {
        type plug
			slave.pcm "headset-mic"
	}
	hint {
		show on
		description "Xnext™ Headset PCM Definition"
	}
}


#
#   Default 
#

ctl.!default {
    type hw
    card 0
}

pcm.!default {
    type asym
    
    playback.pcm {
		type plug
			slave {
				pcm "speaker"
			} 
	}
	capture.pcm {
        type plug
			slave {
				pcm "stereo-mic"
			} 	  
	}
	hint {
		show on
		description "Default: In (Stereo-Mic) / Out (Speaker)"
	}
}


#
# Null PCM
#

pcm.null {
	type null
}

ctl.null {
	type hw
	card 0
}

#	OSS Compatibility 

ctl.dsp {
	type hw
	card 0
}

ctl.dsp0 {
	type hw
	card 0
}

ctl.mixer0 {
	type hw
	card 0
}

ctl.adsp {
	type hw
	card 0
}

ctl.adsp0 {
	type hw
	card 0
}

pcm.dsp {
	type plug
	slave.pcm "default"
}

pcm.dsp0 {
	type plug
	slave.pcm "default"
}

pcm.adsp0 {
	type plug
	slave.pcm "default"
}

pcm.adsp {
	type plug
	slave.pcm "default"
}

#
# Voice Addon 
#

ctl.aux {
	type hw
	card 0
	device 8
}
ctl.VoiceMMode1 {
	type hw
	card 0
	device 2
} 
ctl.VoiceMMode2 {
	type hw
	card 0
	device 15
}
ctl.VoIP {
	type hw
	card 0
	device 3
} 
pcm.aux {
	type plug
		slave {
			pcm "hw:0,8"
		}
}
pcm.VoiceMMode1 {
	type plug
		slave {
			pcm "hw:0,2"
		}
}
pcm.VoiceMMode2 {
	type plug
		slave {
			pcm "hw:0,15"
		}
}
pcm.VoIP {
	type plug
		slave {
			pcm "hw:0,3"
		}
}

ctl.voice {
	type hw
	card 0
}

pcm.voice {
	type asym

	playback.pcm {
		type plug

		slave.pcm {
			type multi

			slaves.a.pcm VoiceMMode1
			slaves.b.pcm VoiceMMode2
			slaves.a.channels 2
			slaves.b.channels 2

			bindings.0.slave a
			bindings.0.channel 0
			bindings.1.slave a
			bindings.1.channel 1
			bindings.2.slave b
			bindings.2.channel 0
			bindings.3.slave b
			bindings.3.channel 1
		}
		route_policy duplicate
	}
	capture.pcm {
		type plug

		slave.pcm {
			type multi

			slaves.a.pcm VoiceMMode1
			slaves.b.pcm VoiceMMode2
			slaves.a.channels 2
			slaves.b.channels 2

			bindings.0.slave a
			bindings.0.channel 0
			bindings.1.slave a
			bindings.1.channel 1
			bindings.2.slave b
			bindings.2.channel 0
			bindings.3.slave b
			bindings.3.channel 1
		}
	}
}

ctl.VoIP_aux {
	type hw
	card 0
}
pcm.VoIP_aux {
	type asym

	playback.pcm {
		type plug

		slave.pcm {
			type multi

			slaves.a.pcm VoIP
			slaves.b.pcm aux
			slaves.a.channels 2
			slaves.b.channels 1

			bindings.0.slave a
			bindings.0.channel 0
			bindings.1.slave a
			bindings.1.channel 1
			bindings.2.slave b
			bindings.2.channel 0
		}
		route_policy duplicate
	}
	capture.pcm "voice"
}

ctl.voice_call {
	type hw
	card 0
}


pcm.voice_call {
	type asym

	playback.pcm {
		type plug

		slave.pcm {
			type multi

			slaves.a.pcm voice
			slaves.b.pcm aux
			slaves.b.pcm VoIP

			slaves.a.channels 2
			slaves.b.channels 1
			slaves.c.channels 2

			bindings.0.slave a
			bindings.0.channel 0
			bindings.1.slave a
			bindings.1.channel 1
			bindings.2.slave b
			bindings.2.channel 0
			bindings.3.slave c
			bindings.3.channel 0
			bindings.4.slave c
			bindings.4.channel 1
		}
		route_policy duplicate
	}
	capture.pcm "voice"
	
	hint {
		show on
		description "Xnext™ VoiceCall PCM Definition"
	}
}




